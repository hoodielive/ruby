# Comments in YAML look like this
#################################
#        Scalar Types           #
#################################

#Our root object (which continues for the entire exercise) will be a map, equivalent to a dictionary, hash or object in other languages

key: value 
another_key: Another values goes here
a_number_value: 100 


# The number 1 will be interpreted as a number, not a boolean. If you want it to be interpreted as a boolean use true 

boolean: true 
null_value: null 
key with spaces: value 

# Notice that strings don't need to be quoted. However, they can be.
however: "A string, enclosed in quotes." 
"Keys can be quoted too." : "Useful if you want to put a ':' in your key." 

# Multiple-line strings can be written either as a 'literal block' (using |), or a 'folded block' (using '>'). 

# Literal Block 
literal_block: | 
        This entire block of text will be the value of the 'literal_block' key, 
        with line breaks being preserved.

        The literal continues until the de-dented, and the leading indentation is stripped. 

                Any lines that are 'more-indented' keep the rest of their indentation - 
                these lines will be idented by 4 spaces. 

folded_style: > 
        This entire block of text will be the value of 'folded_style', but this time, all new lines
        will be replaced with a single space. 

                'More indented' lines keep their newlines, too -
                this textwill appear over two lines. 



###############################
#     Collection Types        #
###############################

a_nested_map: 
        key: value 
        another_key: Another Value 
        another_nested_map:
                hello: hello 



# Maps don't have string keys 
0.25: a float key 

# Keys can also be complex, like multi-line objects : We use ? followed by a space to indicate the start of a complex key. 

? | 
    This is a key 
    that has multiple lines 
: and this is its value 

# YAML also allows mapping between sequences with the complext key syntax but some language parsers may complain: 
? - Manchester United 
  - Real Madrid 
: [ 2001-01-01, 2002-02-02 ] 

# Sequences 

a_sequence:
        - Item 1
        - Item 2 
        - 0.5 # sequences can contain disparate types. 
        - Item 4 
        - key: value 
          another_key: another_value 
        - 
                - This is a sequence
                - inside another sequence 

# Since YAML is a superset of JSON, you can also write JSON-style maps and sequences: 

json_map: {"key": "value"} 
json_seq: [3, 2, 1, "takeoff"] 


# YAML also has a handy feature called "anchors", which let you easily duplicate content accross your document. Both of these keys will have same val
anchored_content: &anchor_name This string will appear as the value of the 2 keys 
other_anchor: *anchor_name 

# Anchors can be used to duplicate/inherit properties 

base: &base 
        name: Everyone has same name 

foo: &foo
        <<: *base 
        age: 10 

bar: &bar 
        <<: *base 
        age: 20 

# foo and bar would also have name: Everyone has same name 
# YAML also has tags, which you can use to explicitly declare types. 

explicit_string: !!str 0.5

# Some parsers implement language specific tags, like this one for Python's complex number type 
python_complex_numbers: !!python/complex 1+2j

# We can also use yaml complex keys with language specific tags 
? !!python/tuple [5, 7] 
: Fifty Seven 
# Would be {(5, 7): 'Fifty Seven'} in python 

# Set 
set: 
        ? item1
        ? item2 
        ? item3

# Set 2 
set2: 
        item1: null
        item2: null
        item3: null 





 
