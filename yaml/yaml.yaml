# Comments in YAML look like this
#################################
#        Scalar Types           #
#################################

#Our root object (which continues for the entire exercise) will be a map, equivalent to a dictionary, hash or object in other languages

key: value 
another_key: Another values goes here
a_number_value: 100 


# The number 1 will be interpreted as a number, not a boolean. If you want it to be interpreted as a boolean use true 

boolean: true 
null_value: null 
key with spaces: value 

# Notice that strings don't need to be quoted. However, they can be.
however: "A string, enclosed in quotes." 
"Keys can be quoted too." : "Useful if you want to put a ':' in your key." 

# Multiple-line strings can be written either as a 'literal block' (using |), or a 'folded block' (using '>'). 

# Literal Block 
literal_block: | 
        This entire block of text will be the value of the 'literal_block' key, 
        with line breaks being preserved.

        The literal continues until the de-dented, and the leading indentation is stripped. 

                Any lines that are 'more-indented' keep the rest of their indentation - 
                these lines will be idented by 4 spaces. 

folded_style: > 
        This entire block of text will be the value of 'folded_style', but this time, all new lines
        will be replaced with a single space. 

                'More indented' lines keep their newlines, too -
                this textwill appear over two lines. 



###############################
#     Collection Types        #
###############################

a_nested_map: 
        key: value 
        another_key: Another Value 
        another_nested_map:
                hello: hello 



# Maps don't have string keys 
0.25: a float key 

# Keys can also be complex, like multi-line objects : We use ? followed by a space to indicate the start of a complex key. 

? | 
    This is a key 
    that has multiple lines 
: and this is its value 

# YAML also allows mapping between sequences with the complext key syntax but some language parsers may complain: 
? - Manchester United 
  - Real Madrid 
: [ 2001-01-01, 2002-02-02 ] 






 
